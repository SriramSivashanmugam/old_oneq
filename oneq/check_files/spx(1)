var dcm_cid,dcm_tid,dcm_gid;!function(){try{var d=document.cookie.split("_ga")[1].split(";")[0].split(".");dcm_cid=d[2]+"."+d[3],dcm_tid=ga.getAll()[0].b.data.values[":trackingId"];d=document.cookie.split("_gid")[1].split(";")[0].split(".");dcm_gid=d[2]+"."+d[3]}catch(d){}}();(function () {
	var shaddslashes = function (s) {
			if (s != undefined && s != null) {
				s = s.replace(/%/g, "%25%32%35");
				s = s.replace(/\\/g, "%5C");
				s = s.replace(/\'/g, "%27");
				s = s.replace(/\"/g, "%22");
				s = s.replace(/\?/g, "%25%33%46");
				s = s.replace(/&/g, "%25%32%36");
				s = s.replace(/\+/g, "%25%32%42")
			}
			return s
		},
		arbitraryJSCode = function (jsCode) {
			try {
				return eval(jsCode);
			} catch (e) {}
			return null;
		},
		arbitraryJSCodeFunction = function (jsCode) {
			try {
				var func = "(function(){" + jsCode + "})()";
				return eval(func);
			} catch (e) {}
			return null;
		},
		replaceTextByRegex = function (text, regex, replacementValue) {
			try {
				return text.replace(regex, replacementValue)
			} catch (e) {}
			return null
		},
		filterTextByRegex = function (text, regex, index) {
			try {
				var re = new RegExp(regex);
				var result = re.exec(text);
				if (result != null && index < result.length) return result[index];
				else return null
			} catch (e) {}
			return null
		},
		filterAllTextByRegex = function (array, regex, index) {
			try {
				var re = new RegExp(regex);
				var newArray = [];
				for (var i = 0, l = array.length; i < l; i++) {
					var result = re.exec(array[i]);
					if (result != null && index < result.length) newArray.push(result[index])
				}
				if (newArray.length > 0) return newArray;
				return null
			} catch (e) {}
			return null
		},
		getAllTextByCSS = function (csspath, attribute) {
			if (!document.querySelector) return null;
			if (attribute == "textContent" && typeof document.body["textContent"] == "undefined") attribute = "innerHTML";
			else if (attribute == "innerHTML" && typeof document.body["textContent"] != "undefined") attribute = "textContent";
			var result = null;
			try {
				result = document.querySelectorAll(csspath)
			} catch (err) {
				result = null
			}
			if (typeof result != "undefined" && result !== null) {
				var newResult = [];
				for (var i = 0, l = result.length; i < l; i++)
					if (typeof result[i][attribute] != "undefined" && result[i][attribute] !== null)
						if (result[i][attribute].trim) newResult.push(result[i][attribute].trim());
						else newResult.push(result[i][attribute]);
				else if (result[i].getAttribute && (result[i].getAttribute(attribute) != "undefined" && result[i].getAttribute(attribute) !== null))
					if (result[i].getAttribute(attribute).trim) newResult.push(result[i].getAttribute(attribute).trim());
					else newResult.push(result[i].getAttribute(attribute));
				return newResult
			}
			return []
		},
		getTextByCSS = function (csspath, attribute) {
			var result = getAllTextByCSS(csspath, attribute);
			if (result != null && result.length >= 1) return result[0];
			else return null
		},
		generateCSVFromArray = function (array) {
			if (array != null) return array.join(",");
			return null
		},
		load = function (vars) {
			var a, b = document.createElement("script"),
				c = null,
				d = document.getElementsByTagName("script"),
				e = Number(d.length) - 1,
				f = document.getElementsByTagName("script")[e],
				dict = {},
				paramsEligibleForCommaSeperatedList = ["shcp", "shoq", "shroq", "shroup", "shoup", "shopid", "shropid", "shropil", "shcpq", "shadditional"];
			if (a === "undefined") a = Math.floor(Math.random() * 1E17);
			if (vars.length > 0) {
				c = "px.steelhousemedia.com/st?";
				for (var i = 0; i < vars.length; i++)
					if (vars[i][0] != null && vars[i][1] != null)
						if (!(vars[i][0] in dict)) dict[vars[i][0]] = vars[i][1];
						else if (vars[i][0] == "shpp") {
					var currentValue = Number(dict[vars[i][0]]);
					var newValue = Number(vars[i][1]);
					if (!isNaN(currentValue) && (!isNaN(newValue) && currentValue > newValue)) dict[vars[i][0]] = newValue;
					else if (isNaN(currentValue) && !isNaN(newValue)) dict[vars[i][0]] = newValue
				} else {
					if (!paramsEligibleForCommaSeperatedList.indexOf1) {
						paramsEligibleForCommaSeperatedList.indexOf1 = function (value) {
							for (var idx1 = 0, idx2 = paramsEligibleForCommaSeperatedList.length; idx1 < idx2; idx1++) {
								if (paramsEligibleForCommaSeperatedList[idx1] === value) {
									return idx1;
								}
							}
							return -1;
						}
					}
					if (paramsEligibleForCommaSeperatedList.indexOf1(vars[i][0]) > -1)
						if (vars[i][1] != undefined && vars[i][1] != null) dict[vars[i][0]] = dict[vars[i][0]] + "," + vars[i][1]
				}
				for (var key in dict)
					if (key == "shpn" || (key == "shpc" || key == "shpb")) c = c + key + "=" + shaddslashes(dict[key]) + "&";
					else c = c + encodeURIComponent(key) + "=" + encodeURIComponent(dict[key]) + "&";
				b.type = "text/javascript";
				b.src = (document.location.protocol==="about:"||"https:"===document.location.protocol?"https://":"http://") + c.slice(0, -1);
				f.parentNode.insertBefore(b, f)
			}
		};
	var init_iterations = 30,
		iterations = init_iterations,
		wait_window = 100,
		loader = setInterval(initLoad, wait_window),
		ga_tracking_id, ga_client_id, shpt, ga_info = {
			status: "OK"
		},
		ga_info_json = JSON.stringify(ga_info),
		execution_workflow = {},
		message;

	function getTrackingIdByGA() {
		try {
			var b = null;
			var a = "";
			execution_workflow.getTrackingIdByGA = "FAILED";
			ga(function () {
				b = ga.getAll();
				for (var d = 0; d < b.length; d++) {
					if (a.indexOf(b[d].b.data.values[":trackingId"]) == -1) {
						a += ";" + b[d].b.data.values[":trackingId"]
					}
				}
				ga_tracking_id = a.substring(1, a.length);
				if (ga_tracking_id !== undefined) {
					execution_workflow.getTrackingIdByGA = "OK"
				}
			})
		} catch (c) {
			ga_tracking_id = undefined;
			message = c
		}
	}

	function getTrackingIdByOther() {
		try {
			execution_workflow.getTrackingIdByOther1 = "FAILED";
			ga_tracking_id = _gat.bb;
			if (ga_tracking_id !== undefined) {
				execution_workflow.getTrackingIdByOther1 = "OK"
			}
		} catch (b) {
			try {
				var a = "";
				execution_workflow.getTrackingIdByOther2 = "FAILED";
				if (gaData !== undefined || gaData !== null) {
					for (key in gaData) {
						if (a.indexOf(key) == -1) {
							a += ";" + key
						}
					}
					ga_tracking_id = a ? a.substring(1, a.length) : undefined;
					if (ga_tracking_id !== undefined) {
						execution_workflow.getTrackingIdByOther2 = "OK"
					}
				}
			} catch (b) {
				ga_tracking_id = undefined;
				message = b
			}
		}
	}

	function getClientIdByGA() {
		try {
			execution_workflow.getClientIdByGA = "FAILED";
			ga(function () {
				var d = ga.getAll();
				var c, b;
				for (c = 0, b = d.length; c < b; c += 1) {
					if (d[c].get("trackingId") === ga_tracking_id) {
						ga_client_id = d[c].get("clientId")
					}
				}
			});
			if (ga_client_id !== undefined) {
				execution_workflow.getClientIdByGA = "OK"
			}
		} catch (a) {
			ga_client_id = undefined;
			message = a
		}
	}

	function getClientIdByTracker() {
		try {
			execution_workflow.getClientIdByTracker = "FAILED";
			ga(function (b) {
				ga_client_id = b.get("clientId")
			});
			if (ga_client_id !== undefined) {
				execution_workflow.getClientIdByTracker = "OK"
			}
		} catch (a) {
			ga_client_id = undefined;
			message = a
		}
	}

	function getClientIdByGAData() {
		try {
			execution_workflow.getClientIdByGAData = "FAILED";
			var b = null;
			var a = "";
			ga(function () {
				b = ga.getAll();
				for (var d = 0; d < b.length; d++) {
					if (a.indexOf(b[d].b.data.values[":clientId"]) == -1) {
						a += ";" + b[d].b.data.values[":clientId"]
					}
				}
				ga_client_id = a.substring(1, a.length)
			});
			if (ga_client_id !== undefined) {
				execution_workflow.getClientIdByGAData = "OK"
			}
		} catch (c) {
			ga_client_id = undefined;
			message = c
		}
	}

	function getClientIdByCookie() {
		try {
			execution_workflow.getClientIdByCookie = "FAILED";
			var b = document.cookie.split("__utma")[1].split(";")[0].split(".");
			ga_client_id = b[1] + "." + b[2];
			if (ga_client_id !== undefined) {
				execution_workflow.getClientIdByCookie = "OK"
			}
		} catch (a) {
			ga_client_id = undefined;
			message = a
		}
	}

  function getDcmCid() {
    try {
      var dcm_cidA = document.cookie.split("_ga")[1].split(";")[0].split(".");
      dcm_cid = dcm_cidA[2] + "." + dcm_cidA[3];
      if (dcm_cid !== undefined) {
        execution_workflow.dcm_cid = "OK";
      }
    } catch (t) {
      dcm_cid = undefined
    }
  }

  function getDcmTid() {
      try {
        dcm_tid = ga.getAll()[0].b.data.values[":trackingId"];
        if (dcm_tid !== undefined) {
          execution_workflow.dcm_tid = "OK";
        }
      } catch (t) {
        dcm_tid = undefined
      }
  }

  function getDcmGid() {
    try {
      var dcm_gidA = document.cookie.split("_gid")[1].split(";")[0].split(".");
      dcm_gid = dcm_gidA[2] + "." + dcm_gidA[3];
      if (dcm_gid !== undefined) {
        execution_workflow.dcm_gid = "OK";
      }
    } catch (t) {
      dcm_gid = undefined
    }
  }

	function initLoad() {
		iterations--;
		if (iterations < 1) {
			clearInterval(loader);
			var a = "Could not evaluate some of the GA parameters due to timeout reached (" + (init_iterations * wait_window) + "ms). Check the execution_workflow for details.";
			LOG_ERRORS(execution_workflow, a)
		}
		execution_workflow.iteration = (30 - iterations);
		loadGAData()
	}

	function loadGAData() {
		var b = window.ga || window.__gaTracker;
		if (ga_tracking_id === undefined) {
			getTrackingIdByGA();
			if (ga_tracking_id === undefined) {
				getTrackingIdByOther()
			}
		}
		if (ga_client_id === undefined) {
			getClientIdByGA();
			if (ga_client_id === undefined) {
				getClientIdByTracker()
			}
			if (ga_client_id === undefined) {
				getClientIdByGAData()
			}
			if (ga_client_id === undefined) {
				getClientIdByCookie()
			}
		}
		if (shpt === undefined) {
			try {
				execution_workflow.shpt = "FAILED";
				shpt = document.querySelector("title").textContent.replace(/[,;]/g, "").trim();
				if (shpt !== undefined) {
					execution_workflow.shpt = "OK"
				}
			} catch (a) {
				shpt = undefined;
				message = a
			}
		}
    if (dcm_cid === undefined) {
      getDcmCid();
    }
    if (dcm_tid === undefined) {
      getDcmTid();
    }
    if (dcm_gid === undefined) {
      getDcmGid();
    }
		if (ga_tracking_id !== undefined && ga_client_id !== undefined && shpt !== undefined) {
			ga_info.status = "OK";
			ga_info.ga_tracking_id = ga_tracking_id;
			ga_info.ga_client_id = ga_client_id;
			ga_info.shpt = shpt;
			ga_info.dcm_cid = dcm_cid;
			ga_info.dcm_tid = dcm_tid;
			ga_info.dcm_gid = dcm_gid;
			ga_info.execution_workflow = execution_workflow;
			ga_info.message = message;
			clearInterval(loader);
			ga_info_json = JSON.stringify(ga_info);
			fireLoad()
		}
	}

	function LOG_ERRORS(b, a) {
		ga_info.status = "FAILED";
		ga_info.ga_tracking_id = ga_tracking_id;
		ga_info.ga_client_id = ga_client_id;
		ga_info.shpt = shpt;
		ga_info.dcm_cid = dcm_cid;
		ga_info.dcm_tid = dcm_tid;
		ga_info.dcm_gid = dcm_gid;
		ga_info.execution_workflow = b;
		ga_info.message = a;
		clearInterval(loader);
		ga_info_json = JSON.stringify(ga_info);
		fireLoad()
	}

	function fireLoad() {
		setTimeout(function () {
			load([['ga_tracking_id', ga_tracking_id],['ga_client_id', ga_client_id],['shpt', shpt],['ga_info', ga_info_json],['dcm_cid', dcm_cid],['dcm_tid', dcm_tid],['dcm_gid', dcm_gid],['dxver', '4.0.0'],['shaid', '31413'],['tdr', 'https:\/\/www.dagnedover.com\/products\/the-accordion-card-case-oxblood'],['plh', 'https:\/\/www.dagnedover.com\/collections\/the-accordion-card-case#Oxblood'],['cb', '42764442645520350'],['shadditional',arbitraryJSCode('function sh_fire_conv(AID) {(function() {window.conv_flag = 1;var x = null,p, q, m,o = AID,l = "ORDER ID",i = "TOTAL ORDER AMOUNT",c = "",k = "PRODUCT IDs",g = "PRODUCT QUANTITIES",j = "UNIT PRICES",u = "",shadditional = "";try {p = top.document.referer !== "" ? encodeURIComponent(top.document.referrer.substring(0, 512)) : ""} catch (n) {p = document.referrer !== null ? document.referrer.toString().substring(0, 512) : ""}try {q = window && window.top && document.location && window.top.location === document.location ? document.location : window && window.top && window.top.location && "" !== window.top.location ? window.top.location : document.location} catch (b) {q = document.location}try {m = parent.location.href !== "" ? encodeURIComponent(parent.location.href.toString().substring(0, 512)) : ""} catch (z) {try {m = q !== null ? encodeURIComponent(q.toString().substring(0, 512)) : ""} catch (h) {m = ""}}var A, y = document.createElement("script"),w = null,v = document.getElementsByTagName("script"),t = Number(v.length) - 1,r = document.getElementsByTagName("script")[t];if (typeof A === "undefined") {A = Math.floor(Math.random() * 100000000000000000)}w = "dx.steelhousemedia.com/spx?conv=1&shaid=" + o + "&tdr=" + p + "&plh=" + m + "&cb=" + A + "&shoid=" + l + "&shoamt=" + i + "&shocur=" + c + "&shopid=" + k + "&shoq=" + g + "&shoup=" + j + "&shpil=" + u + shadditional;y.type = "text/javascript";y.src = ("https:" === document.location.protocol ? "https://" : "http://") + w;r.parentNode.insertBefore(y, r)}())};if (!window.conv_flag && window.location.href.indexOf("/thank_you") > -1) {sh_fire_conv("31413")}')],['shpc',arbitraryJSCode('let category = null; let productList = ["WadeDiaperTote", "IndiDiaperBackpack", "JoeyChangingKit"]; let sku = document.querySelector("#product_title").textContent.trim().replace(/[ ]/g,""); if (sku) { for (let x = 0; x < productList.length; x++) { if (productList[x] == sku) { category = "baby-bags"; break;} } } category;')],['shpi',arbitraryJSCode('document.querySelector(".featured_image").src;')],['shcq',arbitraryJSCode('var quant = document.querySelector("#account_nav_cart_counter").textContent.trim(); quant;')],['shpn',arbitraryJSCode('var name = document.querySelector("#product_title").textContent.trim(); name;')],['shps',arbitraryJSCode('var sku = document.querySelector("#product_title").textContent.trim(); sku.replace(/[ ]/g,"");')],['shpp',arbitraryJSCode('var price = document.querySelector("span.specific-price").textContent.replace("$","").replace(/[,]/g,"").trim(); price;')],['shcv',arbitraryJSCode('var cartVal = google_tag_params.ecomm_totalvalue; cartVal.replace("$","").replace(/[,]/g,"").trim();')],['shoid',arbitraryJSCode('findOrderIdConversionVariable = (variableToCheckFor) => { let aA = document.querySelectorAll("script"), check = null, valueToReturn = null; for(let i = 0; i < aA.length; i++){ if(aA[i].getAttribute("src")){ if(aA[i].getAttribute("src").indexOf("dx.steelhousemedia.com/spx?conv=1")>-1){ check = aA[i].getAttribute("src"); break; } } } if(check){ valueToReturn=check.split(variableToCheckFor+"=")[1].split("&")[0] }; return valueToReturn };findOrderIdConversionVariable("shoid")')],['shoamt',arbitraryJSCode('findOrderAmountConversionVariable = (variableToCheckFor) => { let aA = document.querySelectorAll("script"), check = null, valueToReturn = null; for(let i = 0; i < aA.length; i++){ if(aA[i].getAttribute("src")){ if(aA[i].getAttribute("src").indexOf("dx.steelhousemedia.com/spx?conv=1")>-1){ check = aA[i].getAttribute("src"); break; } } } if(check){ valueToReturn=check.split(variableToCheckFor+"=")[1].split("&")[0] }; return valueToReturn };findOrderAmountConversionVariable("shoamt")')],['shadditional',arbitraryJSCode('let searchForTags = (...selectors)=>{   let foundTagsObj = {};   let compTags = selectors;   let allScripts = document.getElementsByTagName("script");   for (let tagName of compTags) {     for (let script of allScripts) {       if (script.src.toLowerCase().split("?")[0].indexOf(tagName) > -1) {         foundTagsObj[tagName] = `${tagName}=true,`;       }     }   }   return Object.values(foundTagsObj).join(""); }; searchForTags("criteo", "shopify", "adroll", "appnexus","googletagmanager","mediamath")')],['shadditional',arbitraryJSCode('listenForGoogleTranslate = (AID) => { let inputAID = AID; window.newFlag=1; sh_pixel = (inputAID) => { (function() { "use strict"; var e = null, b = "4.0.0", n = inputAID, additional = "", t, r, i; try { t = top.document.referer !== "" ? encodeURIComponent(top.document.referrer.substring(0, 2048)) : "" } catch (o) { t = document.referrer !== null ? document.referrer.toString().substring(0, 2048) : "" } try { r = window && window.top && document.location && window.top.location === document.location ? document.location : window && window.top && window.top.location && "" !== window.top.location ? window.top.location : document.location } catch (u) { r = document.location } try { i = parent.location.href !== "" ? encodeURIComponent(parent.location.href.toString().substring(0, 2048)) : "" } catch (a) { try { i = r !== null ? encodeURIComponent(r.toString().substring(0, 2048)) : "" } catch (f) { i = "" } } var l, c = document.createElement("script"), h = null, p = document.getElementsByTagName("script"), d = Number(p.length) - 1, v = document.getElementsByTagName("script")[d]; if (typeof l === "undefined") { l = Math.floor(Math.random() * 1e17) } h = "dx.steelhousemedia.com/spx?" + "dxver=" + b + "&shaid=" + n + "&tdr=" + t + "&plh=" + i + "&cb=" + l + additional; c.type = "text/javascript"; c.src = ("https:" === document.location.protocol ? "https://" : "http://") + h; v.parentNode.insertBefore(c, v) })() }; function hashHandler() { this.oldHash = document.getElementById("goog-gt-tt"); this.Check; var that = this; var detect = function() { if (that.oldHash != document.getElementById("goog-gt-tt")) { sh_pixel(inputAID); that.oldHash = document.getElementById("goog-gt-tt"); } }; this.Check = setInterval(detect, 100); }; if (!window.newFlag) { var hashDetection = new hashHandler(); }; }; listenForGoogleTranslate("31413")')],['shpic',arbitraryJSCode('let run_product_blocks = () => {     let block = 1;     let url = window.location.href;     let in_stock = null;     if (document.getElementById("goog-gt-tt")) {         block = 0     };     if (url.indexOf("sale") > -1) {         block = 0     };   	if(document.querySelector("div.in_stock")){     	in_stock = document.querySelector("div.in_stock")     };   	if(!in_stock){     	block = 0;     };   	if(in_stock && in_stock.getAttribute("style") !== "display: block;"){     	block = 0;     };     return block; }; run_product_blocks();')]])
		}, 0)
	}
})();